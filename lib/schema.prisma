generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}




model Flight {
  id           Int       @id @default(autoincrement())
  flightNumber String    // Flight number
  airline      String    // Airline name
  origin       String
  destination  String
  departure    DateTime
  arrival      DateTime
  stops        String?   // Number of stops
  stopInfo     String?   // Additional stop information
  price        Float
  logo         String?   // Airline logo
  duration     String
  seats        Seat[]    // Relationship to seats available on this flight
  departBookings Booking[] @relation("DepartFlight") // Relationship to bookings where this flight is the departure flight
  arriveBookings Booking[] @relation("ArriveFlight") // Relationship to bookings where this flight is the arrival flight
  isRoundTrip  Boolean   @default(false) // Indicates if this flight is part of a round trip
}

model Booking {
  id              Int           @id @default(autoincrement())
  bookingNumber   String        @unique
  departFlightId  Int?
  arriveFlightId  Int?
  userId          String?
  paymentMethodId Int?
  createdAt       DateTime      @default(now())
  totalPrice      Float
  passengers      Passenger[]
  seats           Seat[]
  user            User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  departFlight    Flight?       @relation("DepartFlight", fields: [departFlightId], references: [id], onDelete: Cascade)
  arriveFlight    Flight?       @relation("ArriveFlight", fields: [arriveFlightId], references: [id], onDelete: Cascade)
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  @@index([userId])
  @@index([departFlightId])
  @@index([arriveFlightId])
}

model Passenger {
  id                   Int               @id @default(autoincrement())
  firstName            String
  middleName           String?
  lastName             String
  suffix               String? // e.g., Jr., Sr., III
  dateOfBirth          DateTime // Date of birth
  email                String
  phoneNumber          String
  redressNumber        String? // Optional for security clearance
  knownTravellerNumber String? // Optional for security clearance
  emergencyContact     EmergencyContact?
  bookingId            Int
  checkedBags          Int? 
  booking              Booking           @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
}

model EmergencyContact {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  passengerId Int       @unique
  passenger   Passenger @relation(fields: [passengerId], references: [id])
}

model Seat {
  id        Int      @id @default(autoincrement())
  row       Int      // Row number
  col       Int      // Column number
  class     Boolean   
  available Boolean  @default(true)
  flightId  Int
  bookingId Int?
  booking   Booking? @relation(fields: [bookingId], references: [id])
  flight    Flight   @relation(fields: [flightId], references: [id])

  @@unique([row, col, flightId])
}
model PaymentMethod {
  id         Int       @id @default(autoincrement())
  name       String
  cardNumber String
  expiryDate String
  ccv        Int
  bookings   Booking[]
}

model Hotel {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  price       Float
  image       String
}

model Experience {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  price       Float
  image       String
}

model Deal {
  id          Int     @id @default(autoincrement())
  city        String
  place       String
  price       String
  description String?
  image       String
}

model UniquePlace {
  id          Int     @id @default(autoincrement())
  city        String
  place       String
  description String?
  image       String
}

model Review {
  id       Int      @id @default(autoincrement())
  avatar   String
  name     String
  location String
  date     DateTime
  rating   Int
  content  String
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  bookings      Booking[] // Relationship to bookings

}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}